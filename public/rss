<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yunier&#39;s Blog</title>
    <link>https://www.yunier.dev/</link>
    <description>Recent content on Yunier&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 15 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.yunier.dev/rss" rel="self" type="application/rss+xml" />
    <item>
      <title>Consul Service Mesh in Kubernetes - Part 2</title>
      <link>https://www.yunier.dev/post/2023/consul-service-mesh-in-kubernetes-part-2/</link>
      <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2023/consul-service-mesh-in-kubernetes-part-2/</guid>
      <description>Introduction Consul Ingress Gateway Sevice Discovery Conclusion </description>
    </item>
    
    <item>
      <title>Linkerd Service Mesh in Kubernetes</title>
      <link>https://www.yunier.dev/post/2023/istio-service-mesh-in-kubernetes/</link>
      <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2023/istio-service-mesh-in-kubernetes/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Consul Service Mesh in Kubernetes - Part 1</title>
      <link>https://www.yunier.dev/post/2023/consul-service-mesh-in-kubernetes-part-1/</link>
      <pubDate>Sun, 28 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2023/consul-service-mesh-in-kubernetes-part-1/</guid>
      <description>Introduction I have been spending my last few weeks sharpening up my Kubernetes skills, one area that I focused on was how to enable and use a Service Mesh in Kubernetes. A service mesh is a layer in your infrastructure that enables control of inbound and outboard traffic. It controls the traffic of any app or service that uses the network.
Kubernetes offers a wide range of Service Meshes, in this blog post I am going to concentrate on HashiCorp&amp;rsquo;s service mesh offering, Consul, though you may see other refer to it as Consul Connect, Consul Connect is a set of features that were added to Consul was in 2018 to enable service mesh support.</description>
    </item>
    
    <item>
      <title>Rule Engines In .NET</title>
      <link>https://www.yunier.dev/post/2023/rule-engines-in-dotnet/</link>
      <pubDate>Sun, 21 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2023/rule-engines-in-dotnet/</guid>
      <description>Introduction I am working on a project that requires the usage of rules engines to enforce business rules, I am unsure if I should roll out my own custom implementation, probably a bad idea, or if I should use an existing project.
To help me make a decision I will need to look at the current options for rules engines available in .NET, I need to understand their capabilities and limitations.</description>
    </item>
    
    <item>
      <title>JSON:API Implementing Filtering</title>
      <link>https://www.yunier.dev/post/2023/json-api-implementing-filtering/</link>
      <pubDate>Thu, 18 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2023/json-api-implementing-filtering/</guid>
      <description>It has been over a year since I last wrote about JSON:API, since then the team behind JSON:API has published verision 1.1. I want to continue my journey of documenting JOSN:API in .NET by introducing a really cool feature into my Chinook JSON:API project, filterting.
The first thing to know about filtering in JSON:API is that the spec itsel its agnostic to any filtering strategies. Meaning it is up to you to define how filtering should be handled by your API.</description>
    </item>
    
    <item>
      <title>Use a custom OpenAPI specification file in .NET</title>
      <link>https://www.yunier.dev/post/2023/use-a-custom-openapi-specification-file-in-.net/</link>
      <pubDate>Thu, 18 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2023/use-a-custom-openapi-specification-file-in-.net/</guid>
      <description>.NET has the ability to auto-generated OpenAPI specifications based on your code. You can use different decorators on your code like ProducesResponseTypeAttribute or ConsumesAttribute to produce more descriptive response details for web API help pages generated by tools like Swagger.
What if you didn&amp;rsquo;t want to use the autogenerated spec, what if you instead wanted to expose an already written spec, perhaps because you follow an API-first approach to building an API instead of a Code-First approach.</description>
    </item>
    
    <item>
      <title>Power Up Integration Tests with Test Containers</title>
      <link>https://www.yunier.dev/post/2023/power-up-integration-tests-with-tests-containers/</link>
      <pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2023/power-up-integration-tests-with-tests-containers/</guid>
      <description>Introduction In my blog post Integration Testing Using WebApplicationFactory I spoke about the benefits of testing a .NET Core Web API using WebApplicationFactory. The idea is that WebApplicationFactory creates a local HTTP server in-memory, meaning that when using WebApplicationFactory you are not mocking the HTTP request made to your API, you are actually using the API as if it were hosted in a live environment.
The benefit here is that your test code seats in the middle of the Web API and the client code calling the API, meaning you can now test how the API behaves under certain requests from the client.</description>
    </item>
    
    <item>
      <title>Tracking API changes with Optic</title>
      <link>https://www.yunier.dev/post/2023/optic/</link>
      <pubDate>Mon, 17 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2023/optic/</guid>
      <description>Over the last few months, I have been brushing up on API testing, specifically around contract testing.
According to Postman, an API contract is a human- and machine-readable representation of an API&amp;rsquo;s intended functionality. It establishes a single source of truth for what each request and response should look likeâ€”and forms the basis of service-level agreements (SLAs) between producers and consumers. API contract testing helps ensure that new releases don&amp;rsquo;t violate the contract by checking the content and format of requests and responses.</description>
    </item>
    
    <item>
      <title>Stricter Types in TypeScript</title>
      <link>https://www.yunier.dev/post/2023/stricter-types-in-typescript/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2023/stricter-types-in-typescript/</guid>
      <description>Recently TypeScript wizard Matt Pocock made a Twitter thread on branded types. At first, I did not know what he was talking about, I thought it was a new TypeScript feature being introduced in TypeScript 5 but upon closer look, I realized that it was not a new feature but rather a technique that I already knew, opaque types.
I first learned about opaque types from Evert Pot in his blog post Implementing an opaque type in typescript, though I guess now the TypeScript community prefers to call them branded types, the name doesn&amp;rsquo;t matter, the problem being solved is the same, preventing types from being interchangeable.</description>
    </item>
    
    <item>
      <title>tRPC</title>
      <link>https://www.yunier.dev/post/2023/trpc/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2023/trpc/</guid>
      <description>In the last few months, my Twitter feed has been dominated by one topic, tRPC. tRPC is a library that provides type-safety between your front end and backend, in theory, it allows you to quickly build applications.
In today&amp;rsquo;s post, I would like to explore tRPC, its capabilities and features, and how it could be used in a project. To get started, I will create a new Node.js app using Express.</description>
    </item>
    
    <item>
      <title>Using AutoFixture</title>
      <link>https://www.yunier.dev/post/2023/using-autofixture/</link>
      <pubDate>Mon, 02 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2023/using-autofixture/</guid>
      <description>I enjoy writing unit tests and any tools that make writing tests easier are appreciated. For the last year, I have incorporated AutoFixture into all of my unit tests. I have found AutoFixture to be an excellent tool, it changed the way I approach the &amp;ldquo;Arrange&amp;rdquo; phase.
Previously, my arrange phase involved manually assigning values to properties, in a small class that is referenced by a few tests, you may tolerate manually assigning values.</description>
    </item>
    
    <item>
      <title>Use Static IP In WSL</title>
      <link>https://www.yunier.dev/post/2022/use-static-ip-in-wsl/</link>
      <pubDate>Fri, 23 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2022/use-static-ip-in-wsl/</guid>
      <description>In my last post, Kubernetes In WSL - Connect to a service from Windows, I explored a few ways to connect to a Kubernetes service from the host machine, Windows. In the end of that blog post, I stated that using HostPort was the best option because at the time I did not know how to assign a static IP address to WSL.
Without using a static IP address, when WSL is restarted a new IP is assigned.</description>
    </item>
    
    <item>
      <title>Kubernetes In WSL - Connect to a service from Windows</title>
      <link>https://www.yunier.dev/post/2022/connect-to-a-service-in-a-kubernetes-instance-hosted-on-wsl-from-windows/</link>
      <pubDate>Wed, 14 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2022/connect-to-a-service-in-a-kubernetes-instance-hosted-on-wsl-from-windows/</guid>
      <description>Today&amp;rsquo;s post is a follow-up to my Use Kubernetes In WSL blog post, where I outlined how to install Kubernetes on WSL. As noted at the end of the post, I was having issues connecting from the host, a windows machine, to Kubernetes in WSL.
Connection Issue The main issue I was facing was that I could not connect to a pod running on Kubernetes using window&amp;rsquo;s localhost. Take the following Nginx deployment obtained from the official Kubernetes documentation.</description>
    </item>
    
    <item>
      <title>Power Up The Strategy Pattern With Inversion Of Control</title>
      <link>https://www.yunier.dev/post/2022/power-up-the-strategy-pattern-with-inversion-of-control/</link>
      <pubDate>Sun, 04 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2022/power-up-the-strategy-pattern-with-inversion-of-control/</guid>
      <description>If you are a fan of the strategy pattern, and you find yourself adding a lot of conditional logic around each strategy then you should consider replacing all branching logic using inversion of control.
Take the following code as an example. It defines a strategy for reading different file types. For simplicity, the code writes out to the console a message, in a real-world application, the logic would be far more complex, but we are not interested in that logic, rather we are interested in how the strategy pattern works and how we can improve its usage.</description>
    </item>
    
    <item>
      <title>Mockoon</title>
      <link>https://www.yunier.dev/post/2022/mockoon/</link>
      <pubDate>Fri, 25 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2022/mockoon/</guid>
      <description>A while back I made a blog post titled, Tools For The Modern Day Developer, in which I listed the tools I thought at the time every developer should be using. Today, I still stand by that list, but I would like to add an additional tool that lately has become super useful to me, that tool is Mockoon.
Mockoon is a free and open-source mock API tool created by Guillaume in 2017.</description>
    </item>
    
    <item>
      <title>Remote Desktop Into WSL</title>
      <link>https://www.yunier.dev/post/2022/remote-desktop-into-wsl/</link>
      <pubDate>Thu, 17 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2022/remote-desktop-into-wsl/</guid>
      <description>There have been a few instances where I could not figure out a problem within WSL. Problems that would be easier to fix if I had a UI instead of just an instance of the WSL shell. If you find yourself in such a situation know that you can install the UI portion, a Linux desktop on top of WSL. Once the UI has been installed you can RDP into the WSL instance allowing you to use the WSL distro as if it were natively installed on your machine.</description>
    </item>
    
    <item>
      <title>Code Coverage In .NET</title>
      <link>https://www.yunier.dev/post/2022/code-coverage/</link>
      <pubDate>Tue, 15 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2022/code-coverage/</guid>
      <description>If you are writing unit tests in .NET, you may eventually find the need to generate code coverage reports to show how much coverage your project has. The best tool for code coverage reports in my experience has been coverlet because it supports both .NET Framework and .NET Core.
NUnit NUnit, the tried and tested framework originally being a port of JUnit. A powerful tool that when combined with coverlet console can be used to generate code coverage reports.</description>
    </item>
    
    <item>
      <title>Use Kubernetes In WSL</title>
      <link>https://www.yunier.dev/post/2022/use-kubernetes-in-wsl/</link>
      <pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2022/use-kubernetes-in-wsl/</guid>
      <description>If you find yourself in need of having to use Kubernetes in WSL, know that it is possible, hard, but possible. It might require upgrading your machine to Windows 11 if you are on Windows 10 and a few other packages.
Prerequisite To get started we need to know what version of Windows you are on. This is important because Kubernetes will be installed using Microk8s, which requires having snap installed and working.</description>
    </item>
    
    <item>
      <title>Fun With Flurl</title>
      <link>https://www.yunier.dev/post/2022/fun-with-flurl/</link>
      <pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2022/fun-with-flurl/</guid>
      <description>A few months ago I was looking for a new HTTP client to use within my applications. I first checked on awesome dotnet under the HTTP section to see what projects the .NET community is using instead of the default HTTP client. One that immediately stands out is RestSharp, this project has been around for a while and is overall a good choice, but I was looking for something new and fresh, that is when I came across Flurl.</description>
    </item>
    
    <item>
      <title>Connect To The Internet From WSL</title>
      <link>https://www.yunier.dev/post/2022/connect-to-the-internet-from-wsl/</link>
      <pubDate>Sun, 23 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2022/connect-to-the-internet-from-wsl/</guid>
      <description>Problem You have installed WSL successfully on your machine only to find out that you cannot connect to the internet. I have encountered this problem before sometimes it can be fixed externally, but from my experience, no matter what you do, you will end up having to mock around with the resolv.conf file within WSL, more on that later.
You may encounter an internet issue in WSL when the network administrator had configured Windows Defender to not allow local fire rules to be merged with rules applied at the enterprise level.</description>
    </item>
    
    <item>
      <title>Newman - Function Is Not Defined</title>
      <link>https://www.yunier.dev/post/2022/newman-function-is-not-defined/</link>
      <pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2022/newman-function-is-not-defined/</guid>
      <description>The Postman app is an excellent tool for building and testing Web APIs. It gets even better when you combine it with Newman, which allows you to execute your Postman scripts on a continuous integration system like Bitbucket Pipelines. While both Postman and Newman are awesome, you may encounter issues while working with both apps.
if(pm.request.body.isEmpty){ // Code Omitted For Brevity } One issue you may encounter is having a script that was written in Postman, successfully tested using Postman, fail when executed using Newman.</description>
    </item>
    
    <item>
      <title>Authorization Code From Terminal</title>
      <link>https://www.yunier.dev/post/2022/authorization-code-from-terminal/</link>
      <pubDate>Sun, 05 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2022/authorization-code-from-terminal/</guid>
      <description>I was recently presented with a unique challenge at work. I needed to create a script that clones repositories from Bitbucket. The problem is that as of June 2022, Bitbucket only supports managing repositories using OAuth via two grant types, the authorization code grant &amp;amp; the implicit grant.
I won&amp;rsquo;t get into the details here but the implicit grant is no longer recommended and is in fact discouraged from ever being used.</description>
    </item>
    
    <item>
      <title>Shortening URLs</title>
      <link>https://www.yunier.dev/post/2022/shortening-urls/</link>
      <pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2022/shortening-urls/</guid>
      <description>I was recently talking to another developer about the importance of never exposing internal identifiers to the outside world. A well-known example of this is using an auto-incrementing identity field in SQL and exposing that field through an API. A client can look at the highest number to tell how many records exist, in an ordering system this is far from ideal. Now everyone will know how many orders you have created.</description>
    </item>
    
    <item>
      <title>Extracting Values From Types</title>
      <link>https://www.yunier.dev/post/2022/extracting-values-from-types/</link>
      <pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2022/extracting-values-from-types/</guid>
      <description>Learned a cool little trick a while back from Khalid. As a developer, you will often run into scenarios that require you to get a subset of all fields from a model. There are many ways to achieve this task, returning the type and then grabbing each property, for example, take the following User type.
public class User { public User(string name, DateTime dob) { var random = new Random(); Id = random.</description>
    </item>
    
    <item>
      <title>Markup Your Web API Documents</title>
      <link>https://www.yunier.dev/post/2022/markup-your-web-api-documents/</link>
      <pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2022/markup-your-web-api-documents/</guid>
      <description>I&amp;rsquo;ve been thinking about what it takes to build a good Web API, regardless of the technology (REST vs GraphQL) or philosophy used. One concept that has been stuck on my head is the idea of marking up API documents to provide more context around the data.
A Web API document is the response returned by the API itself, you will often see this term used in API specifications like GraphQL, HAL, JSON-LD, and JSON:API.</description>
    </item>
    
    <item>
      <title>Preventing Invalid Assembly Dependencies</title>
      <link>https://www.yunier.dev/post/2022/preventing-invalid-assembly-dependencies/</link>
      <pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2022/preventing-invalid-assembly-dependencies/</guid>
      <description>.NET makes it super simple to update the dependencies of a project. If you are following a solution structure like Clean Architecture where the Web project should not be referenced by the Core project or you have created your own solution structure that requires certain projects do not reference another project then you might need a way to avoid having developers incorrectly adding dependencies.
The diagram above gives a high-level view of all project dependencies in a Clean Architecture solution.</description>
    </item>
    
    <item>
      <title>Faster Web API Pagination</title>
      <link>https://www.yunier.dev/post/2022/faster-web-api-pagination/</link>
      <pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2022/faster-web-api-pagination/</guid>
      <description>A few weeks ago I came across a blog post from Aaron Francis in which he talks about creating efficient pagination using deferred joins. A technique he remembered reading in High Performance MySQL: Proven Strategies for Operating at Scale.
The idea is that without deferred joins pagination queries can impact response time. Pagination is done using an OFFSET to skip over a number of records, however, even though the results are skipped, the database must still fetch those records.</description>
    </item>
    
    <item>
      <title>JSON:API - Pagination Links</title>
      <link>https://www.yunier.dev/post/2022/json-api-pagination-links/</link>
      <pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2022/json-api-pagination-links/</guid>
      <description>It has been a while since I blogged about JSON:API. In my last post on JSON:API I covered how to create new resources. In today&amp;rsquo;s post, I want to go over how I expose pagination links. Pagination links allow a client to page through a collection of resources. A shift of control from the client back to the server.
Here is an example of a possible JSON:API response that includes pagination links.</description>
    </item>
    
    <item>
      <title>Microservice Generator</title>
      <link>https://www.yunier.dev/post/2022/microservice-generator/</link>
      <pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2022/microservice-generator/</guid>
      <description>Over the last few years, our industry has moved away from monolith architectures to microservice architectures. For a good number of reasons, this trend continues to remain strong. One issue you may encounter with creating microservices if you are not using a monorepo is that you may have to build a new project whenever you need to add a new microservice to your app ecosystem. Creating a new project may include creating new repositories in Bitbucket/Github, configuring a continuous integration pipeline, adding build/deploy scripts, building the project based on some folder structure that has been determined by the team.</description>
    </item>
    
    <item>
      <title>Tools For The Modern-Day Developer</title>
      <link>https://www.yunier.dev/post/2021/tools-for-the-modern-developer/</link>
      <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/tools-for-the-modern-developer/</guid>
      <description>Development tools are an essential part of our job, they make us work smarter not harder, they simplify processes and make us more productive. In this post, I want to share some tools that I have found over the years that have made my job easier. If you have a similar experience with a tool that is not listed here, then I would love you hear from you.
Grepapp The first tool I want to talk about is the grepapp, this tool is becoming one of my favorite tools.</description>
    </item>
    
    <item>
      <title>Idempotency In A Web API</title>
      <link>https://www.yunier.dev/post/2021/idempotency-in-a-web-api/</link>
      <pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/idempotency-in-a-web-api/</guid>
      <description>Idempotency, is one of the key features any Web API should have. The idea is that software is unrealiable, the network can fail, the database the API connects to could be offline, the API itself could be performing an intense operation that impacts performance. For all these reasons an API client may resubmit a request, not much of a problem if you are dealing with GET, HEAD, PUT or DELETE, these HTTP methods are idempotent, POST and PATCH on the other hand are not.</description>
    </item>
    
    <item>
      <title>Sort Functions Are Non-Deterministic</title>
      <link>https://www.yunier.dev/post/2021/sort-functions-are-nondeterministic/</link>
      <pubDate>Sat, 13 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/sort-functions-are-nondeterministic/</guid>
      <description>When building a Web API, RESTful or GraphQL, you may want to expose some functionality that allows a client application to sort data.
From my experience, this is often not implemented correctly. Many developers fail to realize that sorting should always be sort plus one. The plus one is a unique value, like a primary key or identifier. The reason for this is that sorting in most databases, like SQL Server, is nondeterministic, meaning the sort function may return different results each time they are called with a specific set of input values even if the database state that they access remains the same.</description>
    </item>
    
    <item>
      <title>A Practical Web API Validation Strategy</title>
      <link>https://www.yunier.dev/post/2021/a-practical-web-api-validation-strategy/</link>
      <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/a-practical-web-api-validation-strategy/</guid>
      <description>In my last post I wrote about how you can leverage JSON Schema to do Web API validation. The main benefit is that the API can expose the schema as an API resource, clients of the API can consume the schema and execute it on their end against any data. The benefit of doing API validation like this is that the client does not need to duplicate any validation logic, they only need to execute the schema.</description>
    </item>
    
    <item>
      <title>A Better Web API Validation Strategy</title>
      <link>https://www.yunier.dev/post/2021/a-better-web-api-validation-strategy/</link>
      <pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/a-better-web-api-validation-strategy/</guid>
      <description>As an API developer, you will eventually need to determine how to handle data validation.
The .NET ecosystem offers a few options, the first option, validation attributes, can be used to annotate how a model should be validated. Validation attributes are great, they don&amp;rsquo;t require any external dependencies, you can specify error messages, create your own custom validator, validate against many data types.
For example, take the following Movie class, notice how the properties have been annotated with validation rules.</description>
    </item>
    
    <item>
      <title>Improving A CPU-Intensive Node.js App</title>
      <link>https://www.yunier.dev/post/2021/improving-a-cpu-intensive-node-app/</link>
      <pubDate>Sun, 19 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/improving-a-cpu-intensive-node-app/</guid>
      <description>Recently I was asked to review a Web API written in Node.js. The API exposes an authentication endpoint, this authentication endpoint must be highly available, responsive, and it cannot become a bottleneck, otherwise, the user experience is severely impacted. Unfortunately, the endpoint had become a bottleneck and was impacting the overall performance of the application. Upon further review, it was determined that the problem was coming from a hashing function that takes the user&amp;rsquo;s password, hashes it, and compares the result with the stored hashed password from the database.</description>
    </item>
    
    <item>
      <title>The Order Of Interfaces Impacts Performace</title>
      <link>https://www.yunier.dev/post/2021/the-order-of-interfaces-impacts-performance/</link>
      <pubDate>Sat, 28 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/the-order-of-interfaces-impacts-performance/</guid>
      <description>I was looking through some of my bookmarked Github issues when I rediscovered issue #32488, in that issue a comment was made that caught my attention. The comment stated that in .NET the order of interfaces impacts performance. This is because in the .NET CLR all class definitions have a collection of methods and interface definitions. Casting is a linear search that walks the interface definition. If you are constantly casting to an Interface located at the end then the CLR must do a longer walk.</description>
    </item>
    
    <item>
      <title>Writing A Good ReadME Is A Skill</title>
      <link>https://www.yunier.dev/post/2021/writing-a-good-readme-is-a-skill/</link>
      <pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/writing-a-good-readme-is-a-skill/</guid>
      <description>Writing good documentation is such an underrated skill, to that extent so is writing ReadME files, ReadME files can be an awesome addition to your project. They give you an opportunity to document all sorts of stuff. For me, a good project should come along with a good ReadME file. The file should outline everything that is necessary for me to interact with the project. Like how to run the unit/integration test, the project&amp;rsquo;s architecture, any terminology, the roadmap for the project, and the most important piece, examples on how to use the project.</description>
    </item>
    
    <item>
      <title>The Platform</title>
      <link>https://www.yunier.dev/post/2021/the-platform/</link>
      <pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/the-platform/</guid>
      <description>HTML, CSS, and Javascript, are the languages of the world wide web, the platform. They are used to create websites, to make them interactive, and to make them beautiful. At one point in my career, I was more plugged into this world. A world that I feel I&amp;rsquo;ve fallen behind since I myself have not exclusively worked on a UI project since the days of AngularJS. That doesn&amp;rsquo;t mean that I don&amp;rsquo;t do any front-end work anymore, it is just that these days I spent most of the time doing back-end development.</description>
    </item>
    
    <item>
      <title>Worker Services Configure Serilog</title>
      <link>https://www.yunier.dev/post/2021/worker-services-configure-serilog/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/worker-services-configure-serilog/</guid>
      <description>A worker service is a type of Background Service that are generally use for long-running task. They can be seen as the equivalent of Windows Services in the .NET Framework, though a worker service is not limited to just windows.
If you are building a worker service, then more than likely you will need to be able to write log data, be that general information of the worker services or perhaps just errors.</description>
    </item>
    
    <item>
      <title>JSON:API - Creating New Resources</title>
      <link>https://www.yunier.dev/post/2021/json-api-creating-new-resources/</link>
      <pubDate>Sun, 08 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/json-api-creating-new-resources/</guid>
      <description>So far in my JSON:API series I&amp;rsquo;ve covered the home resource, adding your own resource, adding an exception handling middleware and how to expose relationship between resources. For the today&amp;rsquo;s post, I would like to cover creating resources. I will update the chinook project by allowing POST request on the customers collections to add new customers.
To get started, the customer controller needs to have a method that will accept the incoming POST request.</description>
    </item>
    
    <item>
      <title>Running Lighthouse On CI/CD Pipeline</title>
      <link>https://www.yunier.dev/post/2021/running-lighthouse-in-cicd-pipeline/</link>
      <pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/running-lighthouse-in-cicd-pipeline/</guid>
      <description>In the world of front end development there is no better tool than Lighthouse. Lighthouse is an open-source, automated tool for improving the quality of web pages. You can run it against any web page, public or requiring authentication. It has audits for performance, accessibility, progressive web apps, SEO and more.
The only problem with lighthouse, at least from my experience, is that it is not used until after the app has been deployed.</description>
    </item>
    
    <item>
      <title>GraphQL Is Protocol Agnostic</title>
      <link>https://www.yunier.dev/post/2021/graphql-is-protocol-agnostic/</link>
      <pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/graphql-is-protocol-agnostic/</guid>
      <description>I&amp;rsquo;m seeing many API developers, specially those that come from a REST background, struggle with GraphQL simply because they are introducing protocol concepts into their GraphQL documents.
give it a REST... pic.twitter.com/sUxqL4ACdj
&amp;mdash; I Am Devloper (@iamdevloper) November 13, 2020 GraphQL is not bound to any network protocol, it is most often implemented on top of the HTTP protocol and it only uses the most basic features of HTTP. That is because GraphQL treats HTTP as a dum pipe.</description>
    </item>
    
    <item>
      <title>Problem Details for HTTP APIs</title>
      <link>https://www.yunier.dev/post/2021/problem-details-for-http-apis/</link>
      <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/problem-details-for-http-apis/</guid>
      <description>One of the many benefits of working with JSON:API and GraphQL is having a standardize way to communicate failures to a client. If you are not working with a spec like JSON:API or GraphQL, then you are in the hands of the developer that built the API and every developers implements error handling differently.
Almost every HTTP API that I&amp;#39;ve consumed implements errors differently. Can we just agree to use Problem Details and be done with it?</description>
    </item>
    
    <item>
      <title>Accessibility Testing in Playwright</title>
      <link>https://www.yunier.dev/post/2021/accessibility-testing-with-playwright/</link>
      <pubDate>Sat, 13 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/accessibility-testing-with-playwright/</guid>
      <description>I don&amp;rsquo;t believe I&amp;rsquo;ve mention this before here, but I am a huge fan of Hey. By far the best email service I have ever used. What makes Hey even cooler is the team behind Hey sharing they engineering approach to different problems. Be that through various tweets or blog post like Scaling the hottest app in tech on AWS and Kubernetes which outline how they use k8s. Recently, they shared how to tackle ay11 under hey accessibility is a lot of work.</description>
    </item>
    
    <item>
      <title>Testing Web Apps With Playwright</title>
      <link>https://www.yunier.dev/post/2021/testing-webapps-with-playwright/</link>
      <pubDate>Thu, 18 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/testing-webapps-with-playwright/</guid>
      <description>A few weeks ago I was looking for an end-to-end testing framework. An alternative to Selenium, and all the other end-to-end frameworks. I came across a project called Playwright. Playwright is a new end-to-end framewrok created and maintained by Microsoft, it allows you to test web applications on different browsers. Some the major feature it provides are as follows.
Playwright has full API coverage for all modern browsers, including Google Chrome and Microsoft Edge (with Chromium), Apple Safari (with WebKit) and Mozilla Firefox.</description>
    </item>
    
    <item>
      <title>Parsing in C#</title>
      <link>https://www.yunier.dev/post/2021/parsing-in-csharp/</link>
      <pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/parsing-in-csharp/</guid>
      <description>I am currently building a JSON:API driven API on .NET 5, the project is called Chinook after the Sqlite Chinook project. The API is mature enough for me to introduce filtering via the Filter query parameter used in JSON:API.
I would like to support dynamic filtering, I want to avoid creating nested if-else/switch statements that check if a given input is part of the filter criteria, and if it is then it gets appended to a filtering clause.</description>
    </item>
    
    <item>
      <title>Asynchronous Request In GraphQL</title>
      <link>https://www.yunier.dev/post/2021/asynchronous-request-in-graphql/</link>
      <pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/asynchronous-request-in-graphql/</guid>
      <description>When I first started to learn about GraphQL I was somewhat surprise to learn that the GraphQL specification did not provide any guidance or spoke of any methods to handle asynchronous request. By asynchronous request, I mean request that cannot be completed within your normal request-response context.
For example, take an API that aggregates orders by combining various types of filters, the API may allow you to filter by only orders that are greater than $100.</description>
    </item>
    
    <item>
      <title>Chinook Project Hosted On Heroku</title>
      <link>https://www.yunier.dev/post/2021/chinook-project-hosted-on-heroku/</link>
      <pubDate>Sat, 02 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/chinook-project-hosted-on-heroku/</guid>
      <description>My Chinook JSON:API project is now in a good enough state that I feel comfortable hosting it on a live server. Here is the base url, https://chinook-jsonapi.herokuapp.com/, I highly recommend using some kind of JSON viewer if you want to interact with the API. If you are on a Chromium base browser then I recommend using JSON Viewer.
Remember, the API does not support filtering, pagination, sorting or include resolvers and it only supports READ operations.</description>
    </item>
    
    <item>
      <title>Tagging EF Core Queries</title>
      <link>https://www.yunier.dev/post/2020/tagging-ef-core-queries/</link>
      <pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2020/tagging-ef-core-queries/</guid>
      <description>.NET Core 2.2 introduce a small feature known as Query Tags. It allows you to annotate queries generated by EF Core. This is super useful for debugging purposes, after all one of the main complains you often hear about EntityFramework is the over completed SQL statements it generates.
I am currently working on a project called Chinook, it demonstrates how to build a JSON:API on .NET Core. The project uses EF Core to query a SQLite database.</description>
    </item>
    
    <item>
      <title>JSON:API - Exposing Relationships</title>
      <link>https://www.yunier.dev/post/2020/json-api-exposing-relationships/</link>
      <pubDate>Sun, 06 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2020/json-api-exposing-relationships/</guid>
      <description>My previous post on JSON:API exposed customers as an API resource, since then, I have updated the project to expose all remaining resources, that includes Albums, Artists, Employees, Genres, Invoices, InvoiceItems, MediaTypes, Playlists, and Tracks. The time has come to expose the relationship that exist between these resource.
For this post, I will expose the one-to-many relationship that exist between artists and albums. To accomplish this task I will have to update the class ArtistServiceModelConfiguration by using the ToManyRelationship method exposed by JsonApiFramework in order to link one artist to many albums.</description>
    </item>
    
    <item>
      <title>Integration Testing Using WebApplicationFactory</title>
      <link>https://www.yunier.dev/post/2021/integration-testing-using-webapplicationfactory/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/integration-testing-using-webapplicationfactory/</guid>
      <description>When the .NET Core team started to envision how the .NET Framework would look like as a modern web framework they set out to expand the testing capabilities of the framework. If you come from the world of .NET MVC 5 you probably know that one of the best ways to test an HTTP request in MVC 5 was to use Phil&amp;rsquo;s HttpSimulator.
That is no longer the case in .</description>
    </item>
    
    <item>
      <title>Dream Machine - Turn On/Off LED Light Switch</title>
      <link>https://www.yunier.dev/post/2020/dream-machine-turn-off-blue-led-light-on-dreammachine/</link>
      <pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2020/dream-machine-turn-off-blue-led-light-on-dreammachine/</guid>
      <description>I want to step away from software for this post to talk about some hardware. Over the years I&amp;rsquo;ve owned a few routers, some have been really really good and some have been really bad. So far the best router I have owned is my current router, the UniFi Dream Machine. While I was mostly happy with my last router, the NighHawk AC1900, it did dropped the WiFi signal a lot, I think that at one point it was dropping the WiFi signal once a week.</description>
    </item>
    
    <item>
      <title>JSON:API - Exposing The Customer Resource</title>
      <link>https://www.yunier.dev/post/2020/json-api-exposing-the-customer-resource/</link>
      <pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2020/json-api-exposing-the-customer-resource/</guid>
      <description>This will be my third blog post on JSON:API in .NET Core.
I plant to add Customer as an API resource, but before we get too deep on the code, I would like to review the Chinook database project. To do that I&amp;rsquo;m going to import Chinook.db into DB Browser for SQLite to see all available entities.
As you can see we have quite a few entities, for this blog post I will concentrate on the customers entity.</description>
    </item>
    
    <item>
      <title>JSON:API - Exception Handling Middleware</title>
      <link>https://www.yunier.dev/post/2020/json-api-exception-handling-middleware/</link>
      <pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2020/json-api-exception-handling-middleware/</guid>
      <description>On my second post on JSON:API in .NET Core I wanted to create an exception handling middleware. This middleware would be responsible for catching all exceptions and for generating a JSON:API Errors Documents.
I&amp;rsquo;ll start by adding a middleware folder on the Chinook.Web project, for now it will only have the exception handling middleware, but, eventually it will have additional middleware.
Folder has been added, now I will add the middleware class to the project in here.</description>
    </item>
    
    <item>
      <title>SQLite - No Such Table Error</title>
      <link>https://www.yunier.dev/post/2020/sqlite-no-such-table-error/</link>
      <pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2020/sqlite-no-such-table-error/</guid>
      <description>Are you using SQLite as an in-memory provider for EF Core on your Unit/Integration test? If you are, you may come across the following exception when creating the in-memory database.
As you can see from the exception, the error is &amp;ldquo;SQLite Error 1: &amp;rsquo;no such table vPet&amp;rsquo;&amp;rdquo; which is odd because vPet is defined as a SQL view on my DbContext, not a SQL table.
Here is my PetsDbContext.
public class PetsDbContext : DbContext { // Rest of code omitted for brevity public DbSet&amp;lt;Pet&amp;gt; Pets { get; set; } public PetsDbContext() { } public PetsDbContext(DbContextOptions&amp;lt;PetsDbContext&amp;gt; options) : base(options) { } protected override void OnModelCreating(ModelBuilder modelBuilder) { // Rest of code omitted for brevity modelBuilder.</description>
    </item>
    
    <item>
      <title>JSON:API - Creating The Home Resource</title>
      <link>https://www.yunier.dev/post/2020/json-api-creating-the-home-resource/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2020/json-api-creating-the-home-resource/</guid>
      <description>This post will be my first entry into a multi-part series of post showing how I&amp;rsquo;ve built RESTful APIs using the JSON:API specification on .NET Core.
I will start by creating a new .NET Core Web Api project, I am going to call this project Chinook, after the sqlite database that I will use for this project. Whenever I create a .NET Core project I like to follow the project structure outlined by Steve Smith in his Clean Architecture repository.</description>
    </item>
    
    <item>
      <title>The Problem With AcquireRequestState</title>
      <link>https://www.yunier.dev/post/2020/the-problem-with-acquirerequeststate/</link>
      <pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2020/the-problem-with-acquirerequeststate/</guid>
      <description>In my second post, I wanted to cover AcquireRequestState. In my four years as a developer I have encountered issues with AcquireRequestState twice. So, what in the world is AcquireRequestState.
AcquireRequestState is part of the ASP.NET Life Cycle, this is an event raised by the HttpApplication, it keeps session state in sync. Though I suspect that most developers are familiar with this event for being a major performance pain in their .</description>
    </item>
    
    <item>
      <title>Configure Serilog Sub-Loggers Using XML App Settings</title>
      <link>https://www.yunier.dev/post/2020/configure-serilog-sub-logger-from-appsettings/</link>
      <pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2020/configure-serilog-sub-logger-from-appsettings/</guid>
      <description>Serilog has a neat feature that allows you to configure sub-loggers. With this feature you can essentially have log specific instances running on your application.
I recently had to configure a .NET Framework application to use two different sub-loggers and while I was able find many examples online on how to configure sub-loggers through AppSettings.json, I did not find any examples on how to configure them through AppSettings.config/App.config so I wanted to document that process on this post.</description>
    </item>
    
    <item>
      <title>My reading list.</title>
      <link>https://www.yunier.dev/reading-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/reading-list/</guid>
      <description>In no particular order, here are my recommended list of books.
Terraform: Up and Running: Writing Infrastructure as Code Designing Data-Intensive Applications Production Ready GraphQL Designing Distributed Systems The DynamoDb Book RESTful Web Services Cookbook The Imposter&amp;rsquo;s Handbook Design Patterns for Cloud Native Applications Understanding Distributed Systems Practical Process Automation Database Internals: A Deep Dive into How Distributed Data Systems Work Modern Trade-Off Analyses for Distributed Architectures Managing Cloud Native Data on Kubernetes Kubernetes Patterns: Reusable Elements for Designing Cloud Native Applications Team Topologies: Organizing Business and Technology Teams for Fast Flow Foundations of Scalable Systems: Designing Distributed Architectures Building Event-Driven Microservices: Leveraging Organizational Data at Scale Fundamentals of Software Architecture: An Engineering Approach System Design Interview â€“ An insider&amp;rsquo;s guide Making Sense of Stream Processing </description>
    </item>
    
    <item>
      <title>Search</title>
      <link>https://www.yunier.dev/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
