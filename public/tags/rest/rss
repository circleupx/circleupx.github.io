<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>REST on Yunier&#39;s Blog</title>
    <link>https://www.yunier.dev/tags/rest/</link>
    <description>Recent content in REST on Yunier&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 31 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.yunier.dev/tags/rest/rss" rel="self" type="application/rss+xml" />
    <item>
      <title>Markup Your Web API Documents</title>
      <link>https://www.yunier.dev/post/2022/markup-your-web-api-documents/</link>
      <pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2022/markup-your-web-api-documents/</guid>
      <description>I&amp;rsquo;ve been thinking about what it takes to build a good Web API, regardless of the technology (REST vs GraphQL) or philosophy used. One concept that has been stuck on my head is the idea of marking up API documents to provide more context around the data.
A Web API document is the response returned by the API itself, you will often see this term used in API specifications like GraphQL, HAL, JSON-LD, and JSON:API.</description>
    </item>
    
    <item>
      <title>Faster Web API Pagination</title>
      <link>https://www.yunier.dev/post/2022/faster-web-api-pagination/</link>
      <pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2022/faster-web-api-pagination/</guid>
      <description>A few weeks ago I came across a blog post from Aaron Francis in which he talks about creating efficient pagination using deferred joins. A technique he remembered reading in High Performance MySQL: Proven Strategies for Operating at Scale.
The idea is that without deferred joins pagination queries can impact response time. Pagination is done using an OFFSET to skip over a number of records, however, even though the results are skipped, the database must still fetch those records.</description>
    </item>
    
    <item>
      <title>JSON:API - Pagination Links</title>
      <link>https://www.yunier.dev/post/2022/json-api-pagination-links/</link>
      <pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2022/json-api-pagination-links/</guid>
      <description>It has been a while since I blogged about JSON:API. In my last post on JSON:API I covered how to create new resources. In today&amp;rsquo;s post, I want to go over how I expose pagination links. Pagination links allow a client to page through a collection of resources. A shift of control from the client back to the server.
Here is an example of a possible JSON:API response that includes pagination links.</description>
    </item>
    
    <item>
      <title>Idempotency In A Web API</title>
      <link>https://www.yunier.dev/post/2021/idempotency-in-a-web-api/</link>
      <pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/idempotency-in-a-web-api/</guid>
      <description>Idempotency, is one of the key features any Web API should have. The idea is that software is unrealiable, the network can fail, the database the API connects to could be offline, the API itself could be performing an intense operation that impacts performance. For all these reasons an API client may resubmit a request, not much of a problem if you are dealing with GET, HEAD, PUT or DELETE, these HTTP methods are idempotent, POST and PATCH on the other hand are not.</description>
    </item>
    
    <item>
      <title>Sort Functions Are Non-Deterministic</title>
      <link>https://www.yunier.dev/post/2021/sort-functions-are-nondeterministic/</link>
      <pubDate>Sat, 13 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/sort-functions-are-nondeterministic/</guid>
      <description>When building a Web API, RESTful or GraphQL, you may want to expose some functionality that allows a client application to sort data.
From my experience, this is often not implemented correctly. Many developers fail to realize that sorting should always be sort plus one. The plus one is a unique value, like a primary key or identifier. The reason for this is that sorting in most databases, like SQL Server, is nondeterministic, meaning the sort function may return different results each time they are called with a specific set of input values even if the database state that they access remains the same.</description>
    </item>
    
    <item>
      <title>A Practical Web API Validation Strategy</title>
      <link>https://www.yunier.dev/post/2021/a-practical-web-api-validation-strategy/</link>
      <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/a-practical-web-api-validation-strategy/</guid>
      <description>In my last post I wrote about how you can leverage JSON Schema to do Web API validation. The main benefit is that the API can expose the schema as an API resource, clients of the API can consume the schema and execute it on their end against any data. The benefit of doing API validation like this is that the client does not need to duplicate any validation logic, they only need to execute the schema.</description>
    </item>
    
    <item>
      <title>A Better Web API Validation Strategy</title>
      <link>https://www.yunier.dev/post/2021/a-better-web-api-validation-strategy/</link>
      <pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/a-better-web-api-validation-strategy/</guid>
      <description>As an API developer, you will eventually need to determine how to handle data validation.
The .NET ecosystem offers a few options, the first option, validation attributes, can be used to annotate how a model should be validated. Validation attributes are great, they don&amp;rsquo;t require any external dependencies, you can specify error messages, create your own custom validator, validate against many data types.
For example, take the following Movie class, notice how the properties have been annotated with validation rules.</description>
    </item>
    
    <item>
      <title>JSON:API - Creating New Resources</title>
      <link>https://www.yunier.dev/post/2021/json-api-creating-new-resources/</link>
      <pubDate>Sun, 08 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/json-api-creating-new-resources/</guid>
      <description>So far in my JSON:API series I&amp;rsquo;ve covered the home resource, adding your own resource, adding an exception handling middleware and how to expose relationship between resources. For the today&amp;rsquo;s post, I would like to cover creating resources. I will update the chinook project by allowing POST request on the customers collections to add new customers.
To get started, the customer controller needs to have a method that will accept the incoming POST request.</description>
    </item>
    
    <item>
      <title>Problem Details for HTTP APIs</title>
      <link>https://www.yunier.dev/post/2021/problem-details-for-http-apis/</link>
      <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/problem-details-for-http-apis/</guid>
      <description>One of the many benefits of working with JSON:API and GraphQL is having a standardize way to communicate failures to a client. If you are not working with a spec like JSON:API or GraphQL, then you are in the hands of the developer that built the API and every developers implements error handling differently.
Almost every HTTP API that I&amp;#39;ve consumed implements errors differently. Can we just agree to use Problem Details and be done with it?</description>
    </item>
    
    <item>
      <title>JSON:API - Exposing The Customer Resource</title>
      <link>https://www.yunier.dev/post/2020/json-api-exposing-the-customer-resource/</link>
      <pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2020/json-api-exposing-the-customer-resource/</guid>
      <description>This will be my third blog post on JSON:API in .NET Core.
I plant to add Customer as an API resource, but before we get too deep on the code, I would like to review the Chinook database project. To do that I&amp;rsquo;m going to import Chinook.db into DB Browser for SQLite to see all available entities.
As you can see we have quite a few entities, for this blog post I will concentrate on the customers entity.</description>
    </item>
    
    <item>
      <title>JSON:API - Exception Handling Middleware</title>
      <link>https://www.yunier.dev/post/2020/json-api-exception-handling-middleware/</link>
      <pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2020/json-api-exception-handling-middleware/</guid>
      <description>On my second post on JSON:API in .NET Core I wanted to create an exception handling middleware. This middleware would be responsible for catching all exceptions and for generating a JSON:API Errors Documents.
I&amp;rsquo;ll start by adding a middleware folder on the Chinook.Web project, for now it will only have the exception handling middleware, but, eventually it will have additional middleware.
Folder has been added, now I will add the middleware class to the project in here.</description>
    </item>
    
    <item>
      <title>JSON:API - Creating The Home Resource</title>
      <link>https://www.yunier.dev/post/2020/json-api-creating-the-home-resource/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2020/json-api-creating-the-home-resource/</guid>
      <description>This post will be my first entry into a multi-part series of post showing how I&amp;rsquo;ve built RESTful APIs using the JSON:API specification on .NET Core.
I will start by creating a new .NET Core Web Api project, I am going to call this project Chinook, after the sqlite database that I will use for this project. Whenever I create a .NET Core project I like to follow the project structure outlined by Steve Smith in his Clean Architecture repository.</description>
    </item>
    
  </channel>
</rss>
