<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JSON Schema on Yunier&#39;s Blog</title>
    <link>https://www.yunier.dev/tags/json-schema/</link>
    <description>Recent content in JSON Schema on Yunier&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 09 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.yunier.dev/tags/json-schema/rss" rel="self" type="application/rss+xml" />
    <item>
      <title>A Better Web API Validation Strategy</title>
      <link>https://www.yunier.dev/post/2021/a-better-web-api-validation-strategy/</link>
      <pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.yunier.dev/post/2021/a-better-web-api-validation-strategy/</guid>
      <description>As an API developer, you will eventually need to determine how to handle data validation.
The .NET ecosystem offers a few options, the first option, validation attributes, can be used to annotate how a model should be validated. Validation attributes are great, they don&amp;rsquo;t require any external dependencies, you can specify error messages, create your own custom validator, validate against many data types.
For example, take the following Movie class, notice how the properties have been annotated with validation rules.</description>
    </item>
    
  </channel>
</rss>
