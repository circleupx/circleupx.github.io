<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TRPC on Yunier&#39;s Wiki</title>
    <link>http://localhost:1313/tags/trpc/</link>
    <description>Recent content in TRPC on Yunier&#39;s Wiki</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 05 Feb 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/trpc/rss" rel="self" type="application/rss+xml" />
    <item>
      <title>tRPC</title>
      <link>http://localhost:1313/post/2023/trpc/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/2023/trpc/</guid>
      <description>&lt;p&gt;In the last few months, my Twitter feed has been dominated by one topic, tRPC. &lt;a href=&#34;https://trpc.io/&#34;&gt;tRPC&lt;/a&gt; is a library that provides type-safety between your front end and backend, in theory, it allows you to quickly build applications.&lt;/p&gt;&#xA;&lt;p&gt;In today&amp;rsquo;s post, I would like to explore tRPC, its capabilities and features, and how it could be used in a project. To get started, I will create a new Node.js app using &lt;a href=&#34;https://expressjs.com/&#34;&gt;Express&lt;/a&gt;. If you prefer to use React or Next.js see &lt;a href=&#34;https://trpc.io/docs/quickstart#next-steps&#34;&gt;the official docs&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
